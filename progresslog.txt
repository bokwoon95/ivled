✓ Unmarshal a simple json structure from a file

✓ Unmarshal an array of simple json structures from a file

✓ Unmarshal an array of json structures (that can be one of two types) from a file
    ✓ Kind of achieved with a union struct, a very ugly solution

✓ Why is Unmarshal() blatantly ignoring certain elements in my Results[] json array?
    • What I will try next is
    "Cool trick: you can parse the same JSON using multiple structs, to adjust to different contents dynamically this way."
    Instead of reading it into a recursive homofolder struct, I can recursively parse the json. Arrays of unknown contents will simply be parsed as '[]json.RawMessage', which I can iterate over at my own leisure(https://stackoverflow.com/a/52250578).
        • I was having problems trying to get json.RawMessage to be recognized (apparently jsoniter did NOT implement the API for json.RawMessage) so I switched over to "encoding/json" to try it out
    • What the fuck? If I switch back to the "encoding/json" stdlib the homofolders suddenly become correctly parsed. Could it be because of a regression in the supposedly 'drop-in replacement' jsoniter library that was the problem in the first place?

✓ using $ivleroot to create absolute file paths, make walk() create the necessary folders with golang's filesystem functions

✓ Generate the initial modules_taken.json using golang

✗ Based on modules_taken.json, download all relevant files into workbin

✗ Remove Results[] from HomoFolder struct and use IVLERequest struct to unwrap Results[] instead

✗ shell script should generate the $AcadYear and $Semester variables automatically based on the system date. But first, check with the user if that is indeed the date (system date might be off)
✗ Instead of setting environment variables, maybe the config variables like StudentID and AcadYear and LAPIkey and AuthToken should be generated upfront and saved into a config.json, where all the module info (currently in modules_taken.json) should also be stored?
    • Make the LAPIkey and AuthToken generation as robust as possible. Opt for dumb, stupid methods that are guaranteed to work with backup routes available rather than clever ways of automatically getting information that may break and leave students hanging.

✗ Refactor IVLERequest into its own function
    • It can also check the comments if the login is valid every time and return an error if the lapikey or authtoken failed

✗ Make syscalls to macOS's `open` to get the user's LAPIkey and AuthToken

Known Limitations
=================
• Autostart can work (add script to launchd), but no polling is done. It's a lot like `git pull`, you have to run it yourself to get updates.
    • It might be for the better anyway since the API servers apparently revoke your keys and tokens if you poll too often.
    • Polling _could_ be done by wrapping the command in a shell script that calls `ivled` in a loop.

• You have to manually copy and paste the API keys and AuthTokens from the web browser (invoked by macOS's `open`)
    • Do also mention which file the program reads the config settings from so that it's very transparent to the user where he can manually paste in his updated keys/authtokens.

• File existence check is pretty brittle right now. It is checked by filenames; if you rename a file, it will be recognized that the file no longer exists and will be redownloaded.
    • Also, no files are ever deleted (but it's unlikely that any file will ever be removed in IVLE anyway)

• Configuration updating might be a big bitch if there's no GUI frontend to it.
    • Include well-explained instructions on where the config files are stored and how to tweak them.

Resources
=========
• Dealing With JSON With Non-Homogeneous Types In GO
https://engineering.bitnami.com/articles/dealing-with-json-with-non-homogeneous-types-in-go.html

• Decode top level JSON array into a slice of structs in golang
https://coderwall.com/p/4c2zig/decode-top-level-json-array-into-a-slice-of-structs-in-golang

• simplejson
https://godoc.org/github.com/bitly/go-simplejson

lapi.sh
=======

✓ A function that generates a json array of this semester's modules together with the module ID (and cache it into a 'modules_taken.json' file). With the unique ID of each module, I can
✗ Write all temporary json files into a /tmp folder and clean up after you're done
    Writing to a /tmp folder also helps to avoid deleting other people's json files that match 'temp*.json'

✗ How the eff do I travel the json tree? Traversal can probaby be done in jq, but I'll miss out on bash's file handing. Bash has commands for file handling, but it needs jq to traverse the tree.

✗ If a FolderName has 'Submissions' (as in 'Student Submissions') in it, do not download anything from the folder.

✗ Unacceptable filetypes: video, audio, anything above 5MB

Possible Failures
=================
✗ The module searching by regex might throw up either no results, or more than one result. Right now I'm assuming it will always return only one result. This assumption needs to be tested with a wide range of other people's modules.
    Possibly implement a failsafe that throws an error when no results are found, and (intelligently) selects one result if there are multiple results found.

Pseudocode
==========
Title & Folders[] --> workbin (Title, Folders[])
FolderName --> folder (FolderName, Folders[], Files[])
FileName --> file (FileName, FileType, FileSize, ID)

walk($1=relpath, $2=jsonblob) {
    if $2.Title and $2.Folders[]
        for f in Folders[]
            walk "$1""/Title" "$f"
        end
    elif $2.FolderName
        for f in Folders[]
            walk "$1""/FolderName" "$f"
        end
        for f in Files[]
            walk "$1""/FolderName" "$f"
        end
    elif $2.FileName
    else
    end
}
